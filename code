#Install and load the rvest and dplyr libraries

install.packages("rvest")
install.packages("dplyr")

library(rvest)
library(dplyr)

# The dplyr package is for data manipulation
# The rvest package is for scraping html webpages

# STEP 1: Scraping from a single webpage

# Create a variable with the link of the page you would like to scrape. The link is https://www.imdb.com/search/title/?title_type=feature&num_votes=25000,&genres=adventure&sort=user_rating,desc

link = "https://www.imdb.com/search/title/?title_type=feature&num_votes=25000,&genres=adventure&sort=user_rating,desc"

# Use the read_html to read the html code from the website

page = read_html(link)

# We want to select name, year, rating, and the synopsis.
# Letâ€™s create a variable called 'name'.
# We want to find the name within the html of the webpage. So we pipe page into html_nodes(), then the results into html_text to get the text from the tag.

name = page %>% html_nodes(".lister-item-header a") %>% html_text()

# Press enter to run the code to test that you are scraping the names of movies.

# Repeat the process used to scrape the names of the movies for the year, rating, and synopsis.

year = page %>% html_nodes(".text-muted.unbold") %>% html_text()
rating = page %>% html_nodes(".ratings-imdb-rating strong") %>% html_text()
synopsis = page %>% html_nodes(".ratings-bar+ .text-muted") %>% html_text()

# Now we will make a dataframe

movies = data.frame(name, year, rating, synopsis, stringsAsFactors = FALSE)

# View your dataframe

View(movies)

#Export to CSV

write.csv(movies, "movies.csv")

#Now, let's scrape the cast members of each movie by scraping the nested links

#First, we need the links of each movie whose cast we want to scrape

movie_links = page %>% html_nodes(".lister-item-header a") %>%
  html_attr("href") %>% paste("https://www.imdb.com", ., sep="")
  
# Now let's get the cast members from the movie links by making a function

# The function is a function of the movie link.
# Use the paste command to create a string of cast members for each movie
# Use the return command to ensure that you get the cast members before moving to the next movie

get_cast = function(movie_link) {
  movie_page = read_html(movie_link)
  movie_cast = movie_page %>% html_nodes("div.sc-36c36dd0-8.fSYMLK a") %>%
    html_text() %>% paste(collapse = ",")
  return(movie_cast)
}

# The function is a function of the movie link.
# Use the paste command to create a string of cast members for each movie
# Use the return command to ensure that you get the cast members before moving to the next movie

cast = sapply(movie_links, FUN = get_cast)

# Let's append cast to our existing dataframe

movies = data.frame(name, year, rating, synopsis, cast, stringsAsFactors = FALSE)


# How do we scrape multiple pages?

# Fist, create a new dataframe for the moview you are about to scrape

movies = data.frame()

# Now, we need to scrape all 1,238 titles. Thus, we need a for loop which inputs the url of each page. Notice that each page starts with a factor of 51. We need to create a for loop which inputs urls that input 51 and is factors in the "start=" section of the url.

for (page_result in seq(from = 1, to = 51, by = 50)) {
  link = paste0("https://www.imdb.com/search/title/?title_type=feature&num_votes=25000,&genres=adventure&sort=user_rating,desc&start=", 
               page_result, "&ref_=adv_nxt")
 
 # The rest of the code can be added to the for loop (except for the dataframe).
 
  page = read_html(link)
  
  name = page %>% html_nodes(".lister-item-header a") %>% html_text()
  movie_links = page %>% html_nodes(".lister-item-header a") %>%
    html_attr("href") %>% paste("https://www.imdb.com", ., sep="")
  year = page %>% html_nodes(".text-muted.unbold") %>% html_text()
  rating = page %>% html_nodes(".ratings-imdb-rating strong") %>% html_text()
  synopsis = page %>% html_nodes(".ratings-bar+ .text-muted") %>% html_text()
  cast = sapply(movie_links, FUN = get_cast, USE.NAMES = FALSE)
  
  # The dataframe needs an rbind command to add the scraped data from each page to the movies dataframe we created earlier.
  
  movies = rbind(movies, data.frame(name, year, rating, synopsis, cast, stringsAsFactors = FALSE))



  


